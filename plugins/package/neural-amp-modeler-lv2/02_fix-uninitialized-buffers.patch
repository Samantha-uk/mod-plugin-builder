diff --git a/deps/NeuralAmpModelerCore/NAM/convnet.cpp b/deps/NeuralAmpModelerCore/NAM/convnet.cpp
index 6d55303..30f0bd2 100644
--- a/deps/NeuralAmpModelerCore/NAM/convnet.cpp
+++ b/deps/NeuralAmpModelerCore/NAM/convnet.cpp
@@ -110,6 +110,9 @@ convnet::ConvNet::ConvNet(const double loudness, const int channels, const std::
   for (size_t i = 0; i < dilations.size(); i++)
     this->_blocks[i].set_params_(i == 0 ? 1 : channels, channels, dilations[i], batchnorm, activation, it);
   this->_block_vals.resize(this->_blocks.size() + 1);
+  for (auto& matrix : this->_block_vals)
+    matrix.setZero();
+  std::fill(this->_input_buffer.begin(), this->_input_buffer.end(), 0.0f);
   this->_head = _Head(channels, it);
   if (it != params.end())
     throw std::runtime_error("Didn't touch all the params when initializing wavenet");
@@ -146,9 +149,20 @@ void convnet::ConvNet::_update_buffers_(NAM_SAMPLE* outputs, const int num_frame
 {
   this->Buffer::_update_buffers_(outputs, num_frames);
   const size_t buffer_size = this->_input_buffer.size();
-  this->_block_vals[0].resize(1, buffer_size);
+
+  if (this->_block_vals[0].rows() != 1 || (size_t)this->_block_vals[0].cols() != buffer_size)
+  {
+    this->_block_vals[0].resize(1, buffer_size);
+    this->_block_vals[0].setZero();
+  }
+
   for (size_t i = 1; i < this->_block_vals.size(); i++)
+  {
+    if (this->_block_vals[i].rows() == this->_blocks[i - 1].get_out_channels() && (size_t)this->_block_vals[i].cols() == buffer_size)
+      continue;  // Already has correct size
     this->_block_vals[i].resize(this->_blocks[i - 1].get_out_channels(), buffer_size);
+    this->_block_vals[i].setZero();
+  }
 }
 
 void convnet::ConvNet::_rewind_buffers_()
diff --git a/deps/NeuralAmpModelerCore/NAM/dsp.cpp b/deps/NeuralAmpModelerCore/NAM/dsp.cpp
index bb7f3be..078c626 100644
--- a/deps/NeuralAmpModelerCore/NAM/dsp.cpp
+++ b/deps/NeuralAmpModelerCore/NAM/dsp.cpp
@@ -90,6 +90,7 @@ void Buffer::_set_receptive_field(const int new_receptive_field, const int input
 {
   this->_receptive_field = new_receptive_field;
   this->_input_buffer.resize(input_buffer_size);
+  std::fill (this->_input_buffer.begin(), this->_input_buffer.end(), 0.0f);
   this->_reset_input_buffer();
 }
 
@@ -105,6 +106,7 @@ void Buffer::_update_buffers_(NAM_SAMPLE* outputs, const int num_frames)
       while (new_buffer_size < minimum_input_buffer_size)
         new_buffer_size *= 2;
       this->_input_buffer.resize(new_buffer_size);
+      std::fill (this->_input_buffer.begin(), this->_input_buffer.end(), 0.0f);
     }
   }
 
@@ -117,6 +119,7 @@ void Buffer::_update_buffers_(NAM_SAMPLE* outputs, const int num_frames)
     this->_input_buffer[i] = outputs[j];
   // And resize the output buffer:
   this->_output_buffer.resize(num_frames);
+  std::fill (this->_output_buffer.begin(), this->_output_buffer.end(), 0.0f);
 }
 
 void Buffer::_rewind_buffers_()
diff --git a/deps/NeuralAmpModelerCore/NAM/wavenet.cpp b/deps/NeuralAmpModelerCore/NAM/wavenet.cpp
index fe5ff91..5ea115a 100644
--- a/deps/NeuralAmpModelerCore/NAM/wavenet.cpp
+++ b/deps/NeuralAmpModelerCore/NAM/wavenet.cpp
@@ -48,7 +48,11 @@ void wavenet::_Layer::process_(const Eigen::MatrixXf& input, const Eigen::Matrix
 
 void wavenet::_Layer::set_num_frames_(const long num_frames)
 {
+  if (this->_z.rows() == this->_conv.get_out_channels() && this->_z.cols() == num_frames)
+    return;  // Already has correct size
+
   this->_z.resize(this->_conv.get_out_channels(), num_frames);
+  this->_z.setZero();
 }
 
 // LayerArray =================================================================
@@ -211,7 +215,12 @@ void wavenet::_Head::process_(Eigen::MatrixXf& inputs, Eigen::MatrixXf& outputs)
 void wavenet::_Head::set_num_frames_(const long num_frames)
 {
   for (size_t i = 0; i < this->_buffers.size(); i++)
+  {
+    if (this->_buffers[i].rows() == this->_channels && this->_buffers[i].cols() == num_frames)
+      continue;  // Already has correct size
     this->_buffers[i].resize(this->_channels, num_frames);
+    this->_buffers[i].setZero();
+  }
 }
 
 void wavenet::_Head::_apply_activation_(Eigen::MatrixXf& x)
@@ -373,6 +382,7 @@ void wavenet::WaveNet::_set_num_frames_(const long num_frames)
   for (size_t i = 0; i < this->_layer_array_outputs.size(); i++)
     this->_layer_array_outputs[i].resize(this->_layer_array_outputs[i].rows(), num_frames);
   this->_head_output.resize(this->_head_output.rows(), num_frames);
+  this->_head_output.setZero();
 
   for (size_t i = 0; i < this->_layer_arrays.size(); i++)
     this->_layer_arrays[i].set_num_frames_(num_frames);
