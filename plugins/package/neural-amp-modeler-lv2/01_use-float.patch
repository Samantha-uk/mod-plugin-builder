diff --git a/deps/NeuralAmpModelerCore/NAM/dsp.cpp b/deps/NeuralAmpModelerCore/NAM/dsp.cpp
index 3e97665..db3734a 100644
--- a/deps/NeuralAmpModelerCore/NAM/dsp.cpp
+++ b/deps/NeuralAmpModelerCore/NAM/dsp.cpp
@@ -23,16 +23,16 @@ DSP::DSP()
 {
 }
 
-DSP::DSP(const double loudness)
+DSP::DSP(const float loudness)
 : mLoudness(loudness)
 , mNormalizeOutputLoudness(false)
 , _stale_params(true)
 {
 }
 
-void DSP::process(double** inputs, double** outputs, const int num_channels, const int num_frames,
-                  const double input_gain, const double output_gain,
-                  const std::unordered_map<std::string, double>& params)
+void DSP::process(const float** inputs, float** outputs, const int num_channels, const int num_frames,
+                  const float input_gain, const float output_gain,
+                  const std::unordered_map<std::string, float>& params)
 {
   this->_get_params_(params);
   this->_apply_input_level_(inputs, num_channels, num_frames, input_gain);
@@ -43,13 +43,13 @@ void DSP::process(double** inputs, double** outputs, const int num_channels, con
 
 void DSP::finalize_(const int num_frames) {}
 
-void DSP::_get_params_(const std::unordered_map<std::string, double>& input_params)
+void DSP::_get_params_(const std::unordered_map<std::string, float>& input_params)
 {
   this->_stale_params = false;
   for (auto it = input_params.begin(); it != input_params.end(); ++it)
   {
     const std::string key = util::lowercase(it->first);
-    const double value = it->second;
+    const float value = it->second;
     if (this->_params.find(key) == this->_params.end()) // Not contained
       this->_stale_params = true;
     else if (this->_params[key] != value) // Contained but new value
@@ -58,7 +58,7 @@ void DSP::_get_params_(const std::unordered_map<std::string, double>& input_para
   }
 }
 
-void DSP::_apply_input_level_(double** inputs, const int num_channels, const int num_frames, const double gain)
+void DSP::_apply_input_level_(const float** inputs, const int num_channels, const int num_frames, const float gain)
 {
   // Must match exactly; we're going to use the size of _input_post_gain later
   // for num_frames.
@@ -83,13 +83,13 @@ void DSP::_process_core_()
     this->_core_dsp_output[i] = this->_input_post_gain[i];
 }
 
-void DSP::_apply_output_level_(double** outputs, const int num_channels, const int num_frames, const double gain)
+void DSP::_apply_output_level_(float** outputs, const int num_channels, const int num_frames, const float gain)
 {
-  const double loudnessGain = pow(10.0, -(this->mLoudness - TARGET_DSP_LOUDNESS) / 20.0);
-  const double finalGain = this->mNormalizeOutputLoudness ? gain * loudnessGain : gain;
+  const float loudnessGain = powf(10.0, -(this->mLoudness - TARGET_DSP_LOUDNESS) / 20.0);
+  const float finalGain = this->mNormalizeOutputLoudness ? gain * loudnessGain : gain;
   for (int c = 0; c < num_channels; c++)
     for (int s = 0; s < num_frames; s++)
-      outputs[c][s] = double(finalGain * this->_core_dsp_output[s]);
+      outputs[c][s] = float(finalGain * this->_core_dsp_output[s]);
 }
 
 // Buffer =====================================================================
@@ -99,7 +99,7 @@ Buffer::Buffer(const int receptive_field)
 {
 }
 
-Buffer::Buffer(const double loudness, const int receptive_field)
+Buffer::Buffer(const float loudness, const int receptive_field)
 : DSP(loudness)
 {
   this->_set_receptive_field(receptive_field);
@@ -176,7 +176,7 @@ Linear::Linear(const int receptive_field, const bool _bias, const std::vector<fl
 {
 }
 
-Linear::Linear(const double loudness, const int receptive_field, const bool _bias, const std::vector<float>& params)
+Linear::Linear(const float loudness, const int receptive_field, const bool _bias, const std::vector<float>& params)
 : Buffer(loudness, receptive_field)
 {
   if (params.size() != (receptive_field + (_bias ? 1 : 0)))
diff --git a/deps/NeuralAmpModelerCore/NAM/dsp.h b/deps/NeuralAmpModelerCore/NAM/dsp.h
index f15989a..3c7de1a 100644
--- a/deps/NeuralAmpModelerCore/NAM/dsp.h
+++ b/deps/NeuralAmpModelerCore/NAM/dsp.h
@@ -28,7 +28,7 @@ class DSPParam
 {
 public:
   const char* name;
-  const double val;
+  const float val;
 };
 // And the params shall be provided as a std::vector<DSPParam>.
 
@@ -39,7 +39,7 @@ class DSP
 {
 public:
   DSP();
-  DSP(const double loudness);
+  DSP(const float loudness);
   // process() does all of the processing requried to take `inputs` array and
   // fill in the required values on `outputs`.
   // To do this:
@@ -49,9 +49,9 @@ public:
   // 3. The core DSP algorithm is run (This is what should probably be
   //    overridden in subclasses).
   // 4. The output level is applied and the result stored to `output`.
-  virtual void process(double** inputs, double** outputs, const int num_channels, const int num_frames,
-                       const double input_gain, const double output_gain,
-                       const std::unordered_map<std::string, double>& params);
+  virtual void process(const float** inputs, float** outputs, const int num_channels, const int num_frames,
+                       const float input_gain, const float output_gain,
+                       const std::unordered_map<std::string, float>& params);
   // Anything to take care of before next buffer comes in.
   // For example:
   // * Move the buffer index forward
@@ -63,11 +63,11 @@ public:
 
 protected:
   // How loud is the model?
-  double mLoudness;
+  float mLoudness;
   // Should we normalize according to this loudness?
   bool mNormalizeOutputLoudness;
   // Parameters (aka "knobs")
-  std::unordered_map<std::string, double> _params;
+  std::unordered_map<std::string, float> _params;
   // If the params have changed since the last buffer was processed:
   bool _stale_params;
   // Where to store the samples after applying input gain
@@ -80,11 +80,11 @@ protected:
   // Copy the parameters to the DSP module.
   // If anything has changed, then set this->_stale_params to true.
   // (TODO use "listener" approach)
-  void _get_params_(const std::unordered_map<std::string, double>& input_params);
+  void _get_params_(const std::unordered_map<std::string, float>& input_params);
 
   // Apply the input gain
   // Result populates this->_input_post_gain
-  void _apply_input_level_(double** inputs, const int num_channels, const int num_frames, const double gain);
+  void _apply_input_level_(const float** inputs, const int num_channels, const int num_frames, const float gain);
 
   // i.e. ensure the size is correct.
   void _ensure_core_dsp_output_ready_();
@@ -95,7 +95,7 @@ protected:
   virtual void _process_core_();
 
   // Copy this->_core_dsp_output to output and apply the output volume
-  void _apply_output_level_(double** outputs, const int num_channels, const int num_frames, const double gain);
+  void _apply_output_level_(float** outputs, const int num_channels, const int num_frames, const float gain);
 };
 
 // Class where an input buffer is kept so that long-time effects can be
@@ -105,7 +105,7 @@ class Buffer : public DSP
 {
 public:
   Buffer(const int receptive_field);
-  Buffer(const double loudness, const int receptive_field);
+  Buffer(const float loudness, const int receptive_field);
   void finalize_(const int num_frames);
 
 protected:
@@ -130,7 +130,7 @@ class Linear : public Buffer
 {
 public:
   Linear(const int receptive_field, const bool _bias, const std::vector<float>& params);
-  Linear(const double loudness, const int receptive_field, const bool _bias, const std::vector<float>& params);
+  Linear(const float loudness, const int receptive_field, const bool _bias, const std::vector<float>& params);
   void _process_core_() override;
 
 protected:
diff --git a/deps/NeuralAmpModelerCore/NAM/lstm.cpp b/deps/NeuralAmpModelerCore/NAM/lstm.cpp
index 39e3acf..6ec3cf6 100644
--- a/deps/NeuralAmpModelerCore/NAM/lstm.cpp
+++ b/deps/NeuralAmpModelerCore/NAM/lstm.cpp
@@ -53,7 +53,7 @@ lstm::LSTM::LSTM(const int num_layers, const int input_size, const int hidden_si
 {
 }
 
-lstm::LSTM::LSTM(const double loudness, const int num_layers, const int input_size, const int hidden_size,
+lstm::LSTM::LSTM(const float loudness, const int num_layers, const int input_size, const int hidden_size,
                  std::vector<float>& params, nlohmann::json& parametric)
 : DSP(loudness)
 {
@@ -90,7 +90,7 @@ void lstm::LSTM::_process_core_()
   // Get params into the input vector before starting
   if (this->_stale_params)
   {
-    for (std::unordered_map<std::string, double>::iterator it = this->_params.begin(); it != this->_params.end(); ++it)
+    for (std::unordered_map<std::string, float>::iterator it = this->_params.begin(); it != this->_params.end(); ++it)
       this->_input_and_params[this->_parametric_map[it->first]] = it->second;
     this->_stale_params = false;
   }
diff --git a/deps/NeuralAmpModelerCore/NAM/lstm.h b/deps/NeuralAmpModelerCore/NAM/lstm.h
index 7dab325..54cd03a 100644
--- a/deps/NeuralAmpModelerCore/NAM/lstm.h
+++ b/deps/NeuralAmpModelerCore/NAM/lstm.h
@@ -51,7 +51,7 @@ class LSTM : public DSP
 public:
   LSTM(const int num_layers, const int input_size, const int hidden_size, std::vector<float>& params,
        nlohmann::json& parametric);
-  LSTM(const double loudness, const int num_layers, const int input_size, const int hidden_size,
+  LSTM(const float loudness, const int num_layers, const int input_size, const int hidden_size,
        std::vector<float>& params, nlohmann::json& parametric);
 
 protected:
diff --git a/src/nam_plugin.cpp b/src/nam_plugin.cpp
index fb301b0..e6f91e1 100644
--- a/src/nam_plugin.cpp
+++ b/src/nam_plugin.cpp
@@ -183,32 +183,19 @@ namespace NAM {
 			}
 		}
 
-		if (dblData.size() != n_samples)
-			dblData.resize(n_samples);
-
 		float inputLevel = powf(10, *(ports.input_level) * 0.05f);
 		float outputLevel = powf(10, *(ports.output_level) * 0.05f);
 
-		for (unsigned int i = 0; i < n_samples; i++)
-		{
-			dblData[i] = ports.audio_in[i] * inputLevel;
-		}
-
 		if (currentModel == nullptr)
 		{
+			memset(ports.audio_out, 0, sizeof(float)*n_samples);
 		}
 		else
 		{
-			double* data = dblData.data();
-
-			currentModel->process(&data, &data, 1, n_samples, 1.0, 1.0, mNAMParams);
+			currentModel->process(&ports.audio_in, &ports.audio_out, 1, n_samples, 1.0, 1.0, mNAMParams);
 			currentModel->finalize_(n_samples);
 		}
 
-		for (unsigned int i = 0; i < n_samples; i++)
-		{
-			ports.audio_out[i] = (float)(dblData[i] * outputLevel);
-		}
 		if (stateChanged)
 		{
 			stateChanged = false;
diff --git a/src/nam_plugin.h b/src/nam_plugin.h
index fcf8523..b34c9ac 100644
--- a/src/nam_plugin.h
+++ b/src/nam_plugin.h
@@ -61,7 +61,7 @@ namespace NAM {
 		std::string currentModelPath;
 		std::string stagedModelPath;
 
-		std::unordered_map<std::string, double> mNAMParams = {};
+		std::unordered_map<std::string, float> mNAMParams = {};
 
 		Plugin();
 		~Plugin() = default;
@@ -104,8 +104,6 @@ namespace NAM {
 		LV2_Atom_Forge atom_forge = {};
 		LV2_Atom_Forge_Frame sequence_frame;
 
-		std::vector<double> dblData;
-
 		float m_rate;
 	};
 }
